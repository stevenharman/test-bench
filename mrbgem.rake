MRuby::Gem::Specification.new('mruby-test-bench') do |spec|
  spec.authors = ["Nathan Ladd"]
  spec.homepage = "https://github.com/test-bench/test-bench"
  spec.licenses = ["MIT"]
  spec.summary = "Test object framework for Ruby and MRuby"

  spec.bins = ['bench-mruby']

  spec.add_dependency 'mruby-at_exit', :mgem => 'mruby-at_exit'
  spec.add_dependency 'mruby-dir-glob', :mgem => 'mruby-dir-glob'
  spec.add_dependency 'mruby-optparse', :mgem => 'mruby-optparse'
  spec.add_dependency 'mruby-onig-regexp', :mgem => 'mruby-onig-regexp'

  spec.add_dependency 'mruby-ruby-description', :github => 'test-bench/mruby-ruby-compat', :path => 'mrbgems/ruby-description'
  spec.add_dependency 'mruby-exception-cause', :github => 'test-bench/mruby-ruby-compat', :path => 'mrbgems/exception-cause'
  spec.add_dependency 'mruby-system-exit', :github => 'test-bench/mruby-ruby-compat', :path => 'mrbgems/system-exit'
  spec.add_dependency 'mruby-toplevel-binding-receiver', :github => 'test-bench/mruby-ruby-compat', :path => 'mrbgems/toplevel-binding-receiver'

  spec.add_dependency 'mruby-test-bench-fixture', :github => 'test-bench/test-bench-fixture'

  spec.mrblib_dir = 'lib'

  loader_files = ['lib/test_bench.rb']

  if ENV.fetch('MRUBY_COMPILE_CONTROLS', 'on') == 'on'
    loader_files << 'lib/test_bench/controls.rb'
  end

  if ENV.fetch('MRUBY_COMPILE_FIXTURES', 'on') == 'on'
    loader_files << 'lib/test_bench/fixtures.rb'
  end

  loader_files.each do |loader_file|
    loader_file = File.join(__dir__, loader_file)

    require_statement_pattern = /^[[:blank:]]*require[[:blank:]]+['"](.*)['"]/

    File.read(loader_file).scan(require_statement_pattern) do |(feature)|
      file = File.join(__dir__, spec.mrblib_dir, feature)

      file << '.rb' unless file.end_with?('.rb')

      if File.exist?(file)
        spec.rbfiles << file
      end
    end

    spec.rbfiles << loader_file
  end

  MRuby::RubyCompat.generate_compiled_features_h(spec)
end

module MRuby
  module RubyCompat
    def self.generate_compiled_features_h(spec)
      compiled_features_h = File.join(__dir__, 'src', 'compiled_features.h')

      File.open(compiled_features_h, 'w') do |compiled_features|
        compiled_features.puts <<~C99
        /* Generated by #{__FILE__} */

        #ifndef MRB_#{spec.funcname.upcase}_COMPILED_FEATURES_H
        #define MRB_#{spec.funcname.upcase}_COMPILED_FEATURES_H

        #include <mruby.h>

        static const char* const mrb_#{spec.funcname}_compiled_features[] = {
        C99

        lib_dir = Pathname.new(File.join(__dir__, spec.mrblib_dir))

        spec.rbfiles.each do |file|
          feature = Pathname.new(file).relative_path_from(lib_dir).sub_ext('')

          compiled_features.puts <<~C99
          \t"#{feature}",
          C99
        end

        compiled_features.puts <<~C99
        \tNULL
        };

        static mrb_int mrb_#{spec.funcname}_compiled_features_count = #{spec.rbfiles.length};

        #endif /* MRB_#{spec.funcname.upcase}_COMPILED_FEATURES_H */

        /* Generated by #{__FILE__} */
        C99
      end
    end
  end
end
